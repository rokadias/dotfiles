(setq racer-cmd "/usr/bin/racer")
(setq racer-rust-src-path "~/OpenSource/rust/rust/src")


;; (setq lsp-rust-server 'rust-analyzer)
(require 'lsp)
(require 'lsp-rust)
;; (load-uid-library '("ra-emacs-lsp"))

(add-hook 'rust-mode-hook #'lsp)
(add-hook 'rust-mode-hook #'company-mode)
(add-hook 'rust-mode-hook #'cargo-minor-mode)
(add-hook 'rust-mode-hook 'set-rust-compile-command)

(defun set-rust-compile-command ()
  (let ((project-file (find-project-file "Makefile\\.toml")))
    (when project-file
      (message "Found project file at %s" project-file)
      (set (make-local-variable 'project-directory) (file-name-directory project-file))
      (set (make-local-variable 'compile-command) "cargo make check")
      )
    )
  )

(defun rust-compile-run-test ()
  (interactive)
  (let* ((project-file (find-project-file "Makefile\\.toml"))
         (default-directory (file-name-directory project-file))
         (current-directory (file-name-directory (buffer-file-name)))
         (current-directory-name (file-name-nondirectory (directory-file-name current-directory)))
         (test-directory (if (string= (concat default-directory "src/") current-directory) "" (concat " " current-directory-name))))
    (when project-file
      (message "Default dir %s current directory %s" (concat default-directory "src/") current-directory)
      (message "Equal %s" (string= (concat default-directory "src/") current-directory))
      (compile (concat "cargo make test" test-directory))
      (set-rust-compile-command)
      )
    )
  )
(define-key rust-mode-map (kbd "M-M") 'rust-compile-run-test)
