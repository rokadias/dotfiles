;;; aider-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from aider.el

 (autoload 'aider-transient-menu "aider" "Transient menu for Aider commands." t)
(autoload 'aider-clear-buffer "aider" "\
Switch to the Aider buffer and clear its contents." t)
(autoload 'aider-reset "aider" "\
Send the command \"/reset\" to the Aider buffer.
With prefix argument CLEAR, clear the buffer contents instead of just resetting.

(fn &optional CLEAR)" t)
(autoload 'aider-exit "aider" "\
Send the command \"/exit\" to the Aider buffer." t)
(autoload 'aider-change-model "aider" "\
Interactively select and change AI model in current aider session.
With prefix argument LEADERBOARDS, open the Aider LLM leaderboard in a browser.
Allows selecting between /model, /editor-model, and /weak-model commands.

(fn LEADERBOARDS)" t)
(register-definition-prefixes "aider" '("aider-"))


;;; Generated autoloads from aider-agile.el

(autoload 'aider-refactor-book-method "aider-agile" "\
Apply refactoring techniques or request suggestions.
Uses current context (function, class, selected region).
If TDD-MODE is non-nil, adjusts prompts and instructions for the
TDD refactor stage.

(fn &optional TDD-MODE)" t)
(autoload 'aider-tdd-cycle "aider-agile" "\
Guide through Test Driven Development cycle (Red-Green-Refactor).
Helps users follow Kent Beck's TDD methodology with AI assistance.
Works with both source code and test files that have been added to aider." t)
(register-definition-prefixes "aider-agile" '("aider--"))


;;; Generated autoloads from aider-bootstrap.el

(autoload 'aider-bootstrap "aider-bootstrap" "\
Bootstrap common code structures using Aider.
Provides a selection of language-agnostic bootstrapping prompts." t)
(register-definition-prefixes "aider-bootstrap" '("aider--"))


;;; Generated autoloads from aider-code-change.el

(autoload 'aider-code-change "aider-code-change" "\
Change code with Aider.
If a region is selected, change that specific region.
If cursor is not in a function, start an architectural discussion.
If cursor is in a function without a selected region, let user choose
between changing the function or general code change." t)
(autoload 'aider-architect-discussion "aider-code-change" "\
Discuss with aider with the given prompt, and choose if we want to accept it." t)
(autoload 'aider-function-or-region-change "aider-code-change" "\
Change code under cursor or in selected region.
If a region is selected, change that specific region.
Otherwise, change the function under cursor.
Additionally, if cursor is on a standalone comment line (and no region),
treat that comment as the requirement, remove it, and send it." t)
(autoload 'aider-implement-todo "aider-code-change" "\
Implement comments with configured keyword in current context.
If region is selected, implement that specific region.
If cursor is on a comment line with the configured keyword,
implement that specific comment.
If cursor is inside a function, implement comments with the
keyword for that function.
Otherwise implement comments with the keyword for the entire
current file.

The keyword and its definition are configured in
`aider-todo-keyword-pair`." t)
(autoload 'aider-write-unit-test "aider-code-change" "\
Generate unit test code for current buffer.
Do nothing if current buffer is not visiting a file.
If current buffer filename contains \"test\":
  - If cursor is inside a test function, implement that test
  - Otherwise show message asking to place cursor inside a test function
Otherwise:
  - If cursor is on a function, generate unit test for that function
  - Otherwise generate unit tests for the entire file" t)
(autoload 'aider-flycheck-fix-errors-in-scope "aider-code-change" "\
Ask Aider to generate a patch fixing Flycheck errors.
If a region is active, operate on that region.
Otherwise prompt to choose scope: current line, current function (if any), or whole file.
Requires the `flycheck` package to be installed and available." t)
(register-definition-prefixes "aider-code-change" '("aider-"))


;;; Generated autoloads from aider-code-read.el

(autoload 'aider-code-read "aider-code-read" "\
Analyze code using various reading techniques.
Provides a selection of different code reading approaches based on context,
including general analysis and specific concerns like security or performance." t)
(register-definition-prefixes "aider-code-read" '("aider--"))


;;; Generated autoloads from aider-comint-markdown.el

(register-definition-prefixes "aider-comint-markdown" '("aider--"))


;;; Generated autoloads from aider-core.el

(autoload 'aider-prompt-insert-add-file-path "aider-core" "\
Select and insert the relative file path to git repository root." t)
(autoload 'aider-go-ahead "aider-core" "\
Send the command \"go ahead\" to the corresponding aider comint buffer." t)
(autoload 'aider-plain-read-string "aider-core" "\
Read a string from the user with PROMPT and optional INITIAL-INPUT.
CANDIDATE-LIST provides additional completion options if provided.
This function combines candidate-list with history for better completion.

(fn PROMPT &optional INITIAL-INPUT CANDIDATE-LIST)")
(defalias 'aider-read-string #'aider-plain-read-string)
(autoload 'aider-switch-to-buffer "aider-core" "\
Switch to the Aider buffer.
When `aider--switch-to-buffer-other-frame' is non-nil, open in a new frame.
If the current buffer is already the Aider buffer, do nothing." t)
(autoload 'aider--prepare-aider-args "aider-core" "\
Prepare aider arguments based on EDIT-ARGS and SUBTREE-ONLY flags.

(fn EDIT-ARGS SUBTREE-ONLY)")
(autoload 'aider-run-aider "aider-core" "\
Run \"aider\" in a comint buffer for interactive conversation.
With prefix argument (e.g., \\[universal-argument]), prompt to edit `aider-args` (EDIT-ARGS).
If SUBTREE-ONLY is non-nil, add '--subtree-only'.
Prompts for --subtree-only in dired/eshell/shell if needed.

(fn &optional EDIT-ARGS SUBTREE-ONLY)" t)
(autoload 'aider-core-insert-prompt "aider-core" "\
Get user input via `aider-read-string` and insert it at point." t)
(register-definition-prefixes "aider-core" '("aider-"))


;;; Generated autoloads from aider-discussion.el

(autoload 'aider-ask-question "aider-discussion" "\
Ask aider question about specific code.
Focuses on understanding, analyzing, improving the selected code or function.
If there is selected region, ask question about the region.
If cursor is not in a function, ask general question.
If cursor is in a function, let user choose between function-specific or general question." t)
(autoload 'aider-general-question "aider-discussion" "\
Ask aider question without context." t)
(autoload 'aider-copy-to-clipboard "aider-discussion" "\
Copy the last assistant message to the clipboard via Aider." t)
(autoload 'aider-debug-exception "aider-discussion" "\
Ask Aider to investigate an exception." t)
(autoload 'aider-open-history "aider-discussion" "\
Open the Aider history file (.aider.chat-history.md under repo git root).
If the history file does not exist, notify the user." t)
(autoload 'aider-help "aider-discussion" "\
Ask aider with help.
With prefix argument HOMEPAGE, open the Aider home page in a browser.

(fn &optional HOMEPAGE)" t)
(autoload 'aider-open-aider-home "aider-discussion" "\
Open the Aider home page in the default browser." t)
(autoload 'aider-run-current-file "aider-discussion" "\
Generate command to run current script file (.py or .sh).
Let user modify the command before running it in a compile buffer.
Maintains a dedicated history list for this command." t)
(register-definition-prefixes "aider-discussion" '("aider-"))


;;; Generated autoloads from aider-doom.el

(autoload 'aider-doom-enable "aider-doom" "\
Enable Aider integration with Doom Emacs.
This adds the necessary hooks to set up keybindings in appropriate buffers." t)
(register-definition-prefixes "aider-doom" '("aider-doom-setup-keys"))


;;; Generated autoloads from aider-file.el

(autoload 'aider-add-current-file "aider-file" "\
Add current file to aider session." t)
(autoload 'aider-current-file-read-only "aider-file" "\
Add current file as read only to aider session." t)
(autoload 'aider-drop-current-file "aider-file" "\
Drop current file from aider session.
If current buffer is the aider comint session and cursor is on a file path,
drop that file instead." t)
(autoload 'aider-action-current-file "aider-file" "\
Perform the COMMAND-PREFIX to aider session.
If the file is in a git repository, use path relative to git root.

(fn COMMAND-PREFIX)")
(autoload 'aider-add-files-in-current-window "aider-file" "\
Add files in all buffers in the current Emacs window to the Aider buffer.
If files are in a git repository, use paths relative to git root." t)
(autoload 'aider-magit-show-last-commit-or-log "aider-file" "\
Show the last commit message using Magit.
With prefix argument (LOG), show commit log instead of single commit.
If Magit is not installed, report that it is required.

(fn &optional LOG)" t)
(autoload 'aider-undo-last-change "aider-file" "\
Undo the last change made by Aider." t)
(autoload 'aider-batch-add-dired-marked-files "aider-file" "\
Add multiple Dired marked files with the \"/add\" command." t)
(autoload 'aider-batch-add-dired-marked-files-read-only "aider-file" "\
Add multiple Dired marked files with the \"/read-only\" command." t)
(autoload 'aider-add-current-file-or-dired-marked-files "aider-file" "\
Add files to Aider based on current context.
If current buffer is a Dired buffer, add all marked files.
Otherwise, add the current file.
With prefix argument READ-ONLY, add files as read-only.

(fn &optional READ-ONLY)" t)
(autoload 'aider-add-current-file-or-dired-marked-files-read-only "aider-file" "\
Add files to Aider as read-only based on current context.
If current buffer is a Dired buffer, add all marked files as read-only.
Otherwise, add the current file as read-only." t)
(autoload 'aider-add-module "aider-file" "\
Add all files from DIRECTORY with SUFFIX-INPUT to Aider session.
SUFFIX-INPUT is a comma-separated list of file suffixes without dots.
If CONTENT-REGEX is provided, only files whose content matches the regex are added.
With a prefix argument (C-u), files are added read-only (/read-only).

(fn &optional READ-ONLY DIRECTORY SUFFIX-INPUT CONTENT-REGEX)" t)
(autoload 'aider-expand-context-current-file "aider-file" "\
Add current file and its dependencies/dependents to aider session.
Given current buffer source code file, figure out the source code files that depend on it,
and the source code files it depends on.
User can choose between /add or /read-only command." t)
(register-definition-prefixes "aider-file" '("aider-"))


;;; Generated autoloads from aider-git.el

(autoload 'aider-pull-or-review-diff-file "aider-git" "\
Review a diff file with Aider or generate one if not viewing a diff.
If current buffer is a .diff file, ask Aider to review it.
Otherwise, generate the diff." t)
(autoload 'aider-magit-blame-analyze "aider-git" "\
Analyze current file or region Git history with AI for deeper insights.
If region is active, analyze just that region. Otherwise analyze entire file.
Combines magit-blame history tracking with AI analysis to help understand
code evolution and the reasoning behind changes." t)
(autoload 'aider--ensure-git-log "aider-git" "\
Fetch commits from the last X months as git.log under GIT-ROOT for REPO-NAME, filtered by KEYWORD.
Returns the path to the git.log file.

(fn GIT-ROOT REPO-NAME KEYWORD)")
(autoload 'aider-magit-blame-or-log-analyze "aider-git" "\
If current buffer is git.log, run log analysis; else if prefix ARG, run log analysis; otherwise run blame analysis.

(fn &optional ARG)" t)
(autoload 'aider-magit-setup-transients "aider-git" "\
Configure Aider's transient menu entries in Magit.
This function uses `with-eval-after-load` to ensure that the
Magit transients are modified only after Magit itself has been loaded.
Call this function to register the Aider commands with Magit." t)
(register-definition-prefixes "aider-git" '("aider-"))


;;; Generated autoloads from aider-helm.el

(if (featurep 'helm) (defalias 'aider-read-string #'aider-helm-read-string))
(register-definition-prefixes "aider-helm" '("aider-helm-read-string"))


;;; Generated autoloads from aider-legacy-code.el

(autoload 'aider-legacy-code "aider-legacy-code" "\
Apply legacy code techniques from \"Working Effectively with Legacy Code\".
Provides a selection of different techniques for working with legacy code
based on the current context." t)
(register-definition-prefixes "aider-legacy-code" '("aider--legacy-code-"))


;;; Generated autoloads from aider-prompt-mode.el

(defvar aider-prompt-file-name ".aider.prompt.org" "\
File name that will automatically enable `aider-prompt-mode` when opened.
This is the file name without path.")
(custom-autoload 'aider-prompt-file-name "aider-prompt-mode" t)
(defvar aider-prompt-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-c C-n") #'aider-send-line-or-region) (define-key map (kbd "C-c C-c") #'aider-send-block-or-region) (define-key map (kbd "C-c C-b") #'aider-send-block-by-line) (define-key map (kbd "C-c C-z") #'aider-switch-to-buffer) (define-key map (kbd "C-c C-f") #'aider-prompt-insert-add-file-path) (define-key map (kbd "C-c C-i") #'aider-core-insert-prompt) (define-key map (kbd "C-c C-y") #'aider-prompt-cycle-file-command) map) "\
Keymap for Aider Prompt Mode.")
(autoload 'aider-send-line-or-region "aider-prompt-mode" "\
Send text to the Aider buffer.
With a prefix argument ARG (e.g., invoked with C-u), send the current paragraph
line by line.
If region is active, send the selected region line by line.
Otherwise, send the line under cursor.
After sending, return cursor to the original buffer.

(fn &optional ARG)" t)
(autoload 'aider-send-region-by-line "aider-prompt-mode" "\
Send current region to aider line by line, ignoring empty and blank lines." t)
(autoload 'aider-send-block-by-line "aider-prompt-mode" "\
Send the current paragraph to aider line by line.
Uses `mark-paragraph` to select the current paragraph, then sends it by line." t)
(autoload 'aider-send-block-or-region "aider-prompt-mode" "\
Send the block or selected region to aider as a single prompt.
After sending, return cursor to the original buffer." t)
(autoload 'aider-open-prompt-file "aider-prompt-mode" "\
Open aider prompt file under git repo root.
If file doesn't exist, create it with command binding help and sample prompt." t)
(autoload 'aider-prompt-cycle-file-command "aider-prompt-mode" "\
Cycle through file commands in the current line.
If the line doesn't contain a file command, add '/add ' to the beginning.
If it already has one of '/add', '/read-only', or '/drop', cycle to the next.
If it has '/ask', toggle to '/architect', and vice versa." t)
(autoload 'aider-prompt-mode "aider-prompt-mode" "\
Major mode derived from `org-mode` for editing aider prompt files.
Special commands:
\\{aider-prompt-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist `(,(concat "/" (regexp-quote aider-prompt-file-name) "\\'") . aider-prompt-mode))
(register-definition-prefixes "aider-prompt-mode" '("aider-"))


;;; Generated autoloads from aider-software-planning.el

(autoload 'aider-start-software-planning "aider-software-planning" "\
Start an interactive software planning session with Aider, Giving context." t)
(register-definition-prefixes "aider-software-planning" '("aider-software-planning--sequential-thinking-prompt"))


;;; Generated autoloads from aider-utils.el

(register-definition-prefixes "aider-utils" '("aider-"))

;;; End of scraped data

(provide 'aider-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; aider-autoloads.el ends here
